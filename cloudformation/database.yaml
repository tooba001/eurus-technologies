Parameters:
  VpcCIDR:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC
  mySecurityGroup:
    Type: String
    Description: Name for the EC2 instance security group
    Default: sg-0123456789abcdef0 
  wordpressdatabase:
    Type: String
    Description: wordpress database
    Default: mywordpressdatabase
Resources:
  # VPC
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref  VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: {}

  # Attach Internet Gateway to VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnets
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone:  us-east-1a
      MapPublicIpOnLaunch: true

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone:  us-east-1b
      MapPublicIpOnLaunch: true

  # Private Subnets
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone:  us-east-1a
      MapPublicIpOnLaunch: false

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone:  us-east-1b
      MapPublicIpOnLaunch: false

# Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  # Private Route Table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  # Public Route
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Associate Public Route Table with Public Subnets
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable

  # Associate Private Route Table with Private Subnets
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable
      # NAT Gateway
  MyNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt MyEIP.AllocationId
      SubnetId: !Ref PublicSubnetA

  # Elastic IP
  MyEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  # Private Route
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref MyNatGateway
#RdsSecurityGroup:
  RdsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS
      VpcId:  !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0 
#DB Subnet Group
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
  # Security Group for EC2 Instances
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH and HTTP access
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort:  '3306'
          ToPort:  '3306' 
          CidrIp: 0.0.0.0/0    
 # RDS Security Group
  DBSecurityGroup:
    Type: AWS::RDS::DBSecurityGroup
    Properties:
        GroupDescription: Security group for RDS
        DBSecurityGroupIngress:
         - CIDRIP: 0.0.0.0/0
         - EC2SecurityGroupId: !Ref InstanceSecurityGroup
        EC2VpcId: !Ref MyVPC
  #RDS Database
  WordPressDB:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: '10'
      DBInstanceClass: db.t2.micro
      Engine: mysql
      EngineVersion: '8.0.35'
      DBName: WordPressDB
      MasterUsername: admin
      MasterUserPassword: tooba2001
      DBSubnetGroupName: !Ref DBSubnetGroup
      MultiAZ: true 
      VPCSecurityGroups: 
        - !GetAtt RdsSecurityGroup.GroupId  
# EC2 Instance!
  MyEC2Instance:
    DependsOn: WordPressDB
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId:  ami-0440d3b780d96b29d # Update with appropriate AMI ID
      SubnetId: !Ref PublicSubnetA
      SecurityGroupIds:
        - !Ref  InstanceSecurityGroup
      KeyName:  tuba-kpr
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022
          wget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm
          sudo yum localinstall mysql57-community-release-el7-11.noarch.rpm -y
          sudo yum install mysql-community-server -y
          sudo systemctl start mysqld
          sudo mysql -h  "${WordPressDB.Endpoint.Address}" -P 3306  -u admin -ptooba2001
          sudo mysql -h  "${WordPressDB.Endpoint.Address}" -P 3306  -u admin -ptooba2001 -e "CREATE DATABASE wordpress;"
          sudo mysql -h  "${WordPressDB.Endpoint.Address}" -P 3306  -u admin -ptooba2001 -e "CREATE USER 'wpuser'@'%' IDENTIFIED BY 'green200#Tooba';"
          sudo mysql -h  "${WordPressDB.Endpoint.Address}" -P 3306  -u admin -ptooba2001 -e "GRANT ALL PRIVILEGES ON wordpress.* TO 'wpuser'@'%';"
          sudo mysql -h  "${WordPressDB.Endpoint.Address}" -P 3306  -u admin -ptooba2001 -e "FLUSH PRIVILEGES;"     
Outputs:
  Myvpc:
    Description: my vpc
    Value: !Ref MyVPC
  PublicSubnetA:
    Description: public subnet
    Value: !Ref PublicSubnetA
  PublicSubnetB:
    Description: public subnet b
    Value: !Ref PublicSubnetB
  PrivateSubnetA:    
    Description: private subnet A
    Value: !Ref PrivateSubnetA
  PrivateSubnetB:
    Description: private subnet B
    Value: !Ref PrivateSubnetB
  mySecurityGroup:
    Description: my security group
    Value: !Ref InstanceSecurityGroup
  wordpressdatabase:
    Description: wordpress database
    Value: !Ref WordPressDB
  RdsEndpoint:
    Description: RDS Endpoint Address
    Value: !GetAtt WordPressDB.Endpoint.Address
  