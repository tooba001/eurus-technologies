Mappings:  
  RegionToAMI:
    us-east-1:
      AMI: ami-0f403e3180720dd7e
  KeyPairRegionMap:
    us-east-1:
      KeyName: tuba-kpr
  InstanceTypeMap:
    t2.micro:
      Type: t2.micro
Parameters:
  Myvpc:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID where resources should be created
    Default: vpc-12345678
  PublicSubnetA:
    Type: AWS::EC2::Subnet::Id
    Description: public subnet a  
    Default:  public-subnet-a-id
  PublicSubnetB:
    Type: AWS::EC2::Subnet::Id
    Description: public subnet b  
    Default: public-subnet-b-id
  PrivateSubnetA:    
    Type: AWS::EC2::Subnet::Id
    Description: private subnet a   
    Default: private-subnet-a-id
  PrivateSubnetB:
    Type: AWS::EC2::Subnet::Id
    Description: private subnet b 
    Default: private-subnet-b-id
  DatabaseInstanceClass:
    Type: String
    Description: RDS DB Instance Class
    Default: db.t2.micro
    AllowedValues:
      - db.t2.micro
  DatabaseBName:
    Type: String
    Description: Name of the WordPress database
    Default: WordPressDB
  AMIParameter:
    Type:  AWS::SSM::Parameter::Value<String>
    Default: ami-0f403e3180720dd7e
  InstanceTypeParameter:
    Type: String
    Default: t2.micro
  KeyNameParameter:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of the key pair to use for EC2 instances
    Default: tuba-kpr
  UsernameParameter:
    Type: String
    Default: /myapp/admin
  PasswordParameter:
    Type: String
    Default: /myapp/tooba2001
Resources:
#Security Group for Load Balancer
  LBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access for Load Balancer
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId: !Ref  Myvpc
# Security Group for EC2 Instances
  webserverSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH and HTTP access
      VpcId: !Ref Myvpc
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !GetAtt LBSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
#DB Subnet Group
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
  # Security Group for EC2 Instances
  databaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH and HTTP access
      VpcId: !Ref Myvpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort:  '3306'
          ToPort:  '3306' 
          SourceSecurityGroupId: !GetAtt webserverSecurityGroup.GroupId 
  UsernameSSMParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Ref UsernameParameter
      Description: Username parameter for the application
      Type: String
      Value: admin
  PasswordSSMParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Ref PasswordParameter
      Description: Password parameter for the application
      Type: String
      Value: tooba2001
  #RDS Database
  WordPressDB:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: '10'
      DBInstanceClass:  !Ref DatabaseInstanceClass
      Engine: mysql
      EngineVersion: '8.0.35'
      DBName: !Ref DatabaseBName
      MasterUsername: !GetAtt UsernameSSMParameter.Value
      MasterUserPassword: !GetAtt PasswordSSMParameter.Value
      DBSubnetGroupName: !Ref DBSubnetGroup
      MultiAZ: true 
      VPCSecurityGroups: 
        - !GetAtt databaseSecurityGroup.GroupId
# EC2 Instance!
  MyEC2Instance:
    DependsOn: WordPressDB
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !FindInMap [InstanceTypeMap, t2.micro, Type] 
      ImageId:  !FindInMap [RegionToAMI, us-east-1, AMI] # Update with appropriate AMI ID
      SubnetId: !Ref PublicSubnetA
      SecurityGroupIds:
        - !Ref webserverSecurityGroup
      KeyName:  !FindInMap [KeyPairRegionMap, !Ref "AWS::Region", KeyName]
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022
          wget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm
          sudo yum localinstall mysql57-community-release-el7-11.noarch.rpm -y
          sudo yum install mysql-community-server -y
          sudo systemctl start mysqld
          sudo mysql -h  "${WordPressDB.Endpoint.Address}" -P 3306  -u admin -ptooba2001
          sudo mysql -h  "${WordPressDB.Endpoint.Address}" -P 3306  -u admin -ptooba2001 -e "CREATE DATABASE wordpress;"
          sudo mysql -h  "${WordPressDB.Endpoint.Address}" -P 3306  -u admin -ptooba2001 -e "CREATE USER 'wpuser'@'%' IDENTIFIED BY 'green200#Tooba';"
          sudo mysql -h  "${WordPressDB.Endpoint.Address}" -P 3306  -u admin -ptooba2001 -e "GRANT ALL PRIVILEGES ON wordpress.* TO 'wpuser'@'%';"
          sudo mysql -h  "${WordPressDB.Endpoint.Address}" -P 3306  -u admin -ptooba2001 -e "FLUSH PRIVILEGES;"     
Outputs:
  Myvpc:
    Description: my vpc
    Value: !Ref Myvpc
  PublicSubnetA:
    Description: public subnet
    Value: !Ref PublicSubnetA
  PublicSubnetB:
    Description: public subnet b
    Value: !Ref PublicSubnetB
  PrivateSubnetA:    
    Description: private subnet A
    Value: !Ref PrivateSubnetA
  PrivateSubnetB:
    Description: private subnet B
    Value: !Ref PrivateSubnetB
  RdsEndpoint:
    Description: RDS Endpoint Address
    Value: !GetAtt WordPressDB.Endpoint.Address
  webservergroup: 
    Description: web server group
    Value: !Ref webserverSecurityGroup
  loadbalancersecuritygroup: 
    Description: load balancer security group
    Value: !Ref  LBSecurityGroup
 