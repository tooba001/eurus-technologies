
Resources:
  # VPC
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: {}

  # Attach Internet Gateway to VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnets
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone:  us-east-1a
      MapPublicIpOnLaunch: true

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone:  us-east-1b
      MapPublicIpOnLaunch: true

  # Private Subnets
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone:  us-east-1a
      MapPublicIpOnLaunch: false

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone:  us-east-1b
      MapPublicIpOnLaunch: false

# Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  # Private Route Table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  # Public Route
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Associate Public Route Table with Public Subnets
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable

  # Associate Private Route Table with Private Subnets
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable
      # NAT Gateway
  MyNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt MyEIP.AllocationId
      SubnetId: !Ref PublicSubnetA

  # Elastic IP
  MyEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  # Private Route
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref MyNatGateway
   
  #IAM role
  # MyIAMRole:
  #   Type: "AWS::IAM::Role"
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Statement:
  #       - Effect: "Allow"
  #           Principal:
  #             Service: "ec2.amazonaws.com"
  #           Action: "sts:AssumeRole"
  #     Policies:
  #       - PolicyName: "SSMParameterResolverPolicy"
  #         PolicyDocument:
  #           Statement:
  #             - Effect: "Allow"
  #               Action:
  #                 - "ssm:GetParameters"
  #                 - "ssm:GetParameter"
  #                 - "ssm:GetParametersByPath"
  #               Resource: "*"
  # Security Group for EC2 Instances
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH and HTTP access
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort:  '3306'
          ToPort:  '3306' 
          CidrIp: 0.0.0.0/0    
   #RdsSecurityGroup:
  RdsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS
      VpcId:  !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0 
  #DB Subnet Group
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
  # RDS Security Group
  DBSecurityGroup:
    Type: AWS::RDS::DBSecurityGroup
    Properties:
        GroupDescription: Security group for RDS
        DBSecurityGroupIngress:
         - CIDRIP: 0.0.0.0/0
         - EC2SecurityGroupId: !Ref InstanceSecurityGroup
        EC2VpcId: !Ref MyVPC
  #RDS Database
  WordPressDB:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: '10'
      DBInstanceClass: db.t2.micro
      Engine: mysql
      EngineVersion: '8.0.35'
      DBName: WordPressDB
      MasterUsername: admin
      MasterUserPassword: tooba2001
      DBSubnetGroupName: !Ref DBSubnetGroup
      MultiAZ: true 
      VPCSecurityGroups: 
        - !GetAtt RdsSecurityGroup.GroupId  
  # EC2 Instance!
  MyEC2Instance:
    DependsOn: WordPressDB
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId:  ami-0440d3b780d96b29d # Update with appropriate AMI ID
      SubnetId: !Ref PublicSubnetA
      SecurityGroupIds:
        - !Ref  InstanceSecurityGroup
      KeyName:  tuba-kpr
     # IamInstanceProfile: !Ref MyIAMRole
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022
          wget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm
          sudo yum localinstall mysql57-community-release-el7-11.noarch.rpm -y
          sudo yum install mysql-community-server -y
          sudo systemctl start mysqld
          sudo mysql -h  "${WordPressDB.Endpoint.Address}" -P 3306  -u admin -ptooba2001
          sudo mysql -h  "${WordPressDB.Endpoint.Address}" -P 3306  -u admin -ptooba2001 -e "CREATE DATABASE wordpress;"
          sudo mysql -h  "${WordPressDB.Endpoint.Address}" -P 3306  -u admin -ptooba2001 -e "CREATE USER 'wpuser'@'%' IDENTIFIED BY 'green200#Tooba';"
          sudo mysql -h  "${WordPressDB.Endpoint.Address}" -P 3306  -u admin -ptooba2001 -e "GRANT ALL PRIVILEGES ON wordpress.* TO 'wpuser'@'%';"
          sudo mysql -h  "${WordPressDB.Endpoint.Address}" -P 3306  -u admin -ptooba2001 -e "FLUSH PRIVILEGES;"     
  #Launch Configuration
  WebLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-0440d3b780d96b29d # Use the appropriate WordPress AMI
      InstanceType: t2.micro # Set as needed
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      KeyName: tuba-kpr # Update with your SSH key
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
           sudo yum update -y
           sudo yum install -y httpd
           sudo systemctl start httpd
           sudo systemctl enable httpd
           sudo yum install -y httpd php php-common php-gd php-mysqli
           sudo systemctl restart httpd
           sudo wget https://wordpress.org/latest.zip
           sudo unzip latest.zip
           sudo cp -r wordpress/* /var/www/html
           sudo chown apache:apache -R /var/www/html
           sudo cp /var/www/html/wp-config-sample.php /var/www/html/wp-config.php
           sudo sed -i "s/database_name_here/wordpress/" /var/www/html/wp-config.php
           sudo sed -i "s/username_here/wpuser/" /var/www/html/wp-config.php
           sudo sed -i "s/password_here/green200#Tooba/" /var/www/html/wp-config.php
           sudo sed -i "s/localhost/${WordPressDB.Endpoint.Address}/" /var/www/html/wp-config.php
           sudo systemctl restart httpd 
  #Target Group
  WordpressTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: WordpressTargetGroup
      VpcId: !Ref MyVPC
      Protocol: HTTP
      Port: '80'
      HealthCheckProtocol: HTTP
      HealthCheckPort: '80'
  #Security Group for Load Balancer
  LBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access for Load Balancer
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      VpcId: !Ref MyVPC
   # Load Balancer  
  WordpressLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: WordpressLoadBalancer
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      SecurityGroups:
        - !Ref LBSecurityGroup
      Scheme: internet-facing
      Type: application
   #Load Balancer Listener
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
       DefaultActions:
         - TargetGroupArn: !Ref WordpressTargetGroup
           Type: forward
       LoadBalancerArn: !Ref WordpressLoadBalancer
       Port: '80'
       Protocol: HTTP
  #Autoscaling Group
  WebServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:  
        - us-east-1a
        - us-east-1b
      LaunchConfigurationName: !Ref WebLaunchConfig
      MinSize: '2'
      MaxSize: '4'
      DesiredCapacity: '2'
      TargetGroupARNs:   # Use TargetGroupARNs instead of LoadBalancerName
        - !Ref WordpressTargetGroup 
      HealthCheckType: EC2
      HealthCheckGracePeriod: '300'
      VPCZoneIdentifier: 
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
    
  